#include <string.h>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <math.h>

#include "pico/stdlib.h"

#include "picosystem.hpp"

namespace picosystem {

  // pico system logo, 1bpp, 82x50px
  uint8_t logo[] =
   {0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
    0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xf8, 0xc0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 0xc7, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xf8, 0xc0, 0xc7, 0x80, 0x01, 0xf9, 0xff, 0x01, 0xff, 0xf0, 0x1f, 0xf8, 0xc0, 0xc7, 0x80,
    0x00, 0x79, 0xfc, 0x00, 0x7f, 0xc0, 0x07, 0xf8, 0xc0, 0xc7, 0x9f, 0xfc, 0x39, 0xf8, 0x7c, 0x3f,
    0x87, 0xc3, 0xf8, 0xc0, 0xc7, 0x9f, 0xff, 0x39, 0xf1, 0xff, 0x1f, 0x1f, 0xf1, 0xf8, 0xc0, 0xc7,
    0x9f, 0xff, 0x19, 0xe3, 0xff, 0x8e, 0x3f, 0xf8, 0xf8, 0xc0, 0xc7, 0x9f, 0xff, 0x99, 0xe7, 0xff,
    0xce, 0x7f, 0xfc, 0xf8, 0xc0, 0xc7, 0x9f, 0xff, 0x99, 0xc7, 0xff, 0xfc, 0x7f, 0xfc, 0x78, 0xc0,
    0xc7, 0x9f, 0xff, 0x99, 0xcf, 0xff, 0xfc, 0xff, 0xfe, 0x78, 0xc0, 0xc7, 0x9f, 0xff, 0x19, 0xcf,
    0xff, 0xfc, 0xff, 0xfe, 0x78, 0xc0, 0xc7, 0x9f, 0xff, 0x39, 0xcf, 0xff, 0xfc, 0xff, 0xfe, 0x78,
    0xc0, 0xc7, 0x9f, 0xfc, 0x39, 0xcf, 0xff, 0xfc, 0xff, 0xfe, 0x78, 0xc0, 0xc7, 0x80, 0x00, 0x79,
    0xcf, 0xff, 0xfc, 0xff, 0xfe, 0x78, 0xc0, 0xc7, 0x80, 0x01, 0xf9, 0xc7, 0xff, 0xfc, 0x7f, 0xfc,
    0x78, 0xc0, 0xc7, 0x9f, 0xff, 0xf9, 0xe7, 0xff, 0xce, 0x7f, 0xfc, 0xf8, 0xc0, 0xc7, 0x9f, 0xff,
    0xf9, 0xe3, 0xff, 0x8e, 0x3f, 0xf8, 0xf8, 0xc0, 0xc7, 0x9f, 0xff, 0xf9, 0xf1, 0xff, 0x1f, 0x1f,
    0xf1, 0xf8, 0xc0, 0xc7, 0x9f, 0xff, 0xf9, 0xf8, 0x7c, 0x3f, 0x87, 0xc3, 0xf8, 0xc0, 0xc7, 0x9f,
    0xff, 0xf9, 0xfc, 0x00, 0x7f, 0xc0, 0x07, 0xf8, 0xc0, 0xc7, 0x9f, 0xff, 0xf9, 0xff, 0x01, 0xff,
    0xf0, 0x1f, 0xf8, 0xc0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 0xc7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xf8, 0xc0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0,
    0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc0, 0xc0, 0x00, 0x79, 0x86, 0x79, 0xfe, 0x7e, 0xc0, 0xc0, 0x00, 0xc0, 0xc0, 0x00, 0xfd, 0x86,
    0xfd, 0xfe, 0xfe, 0xe1, 0xc0, 0x00, 0xc0, 0xc0, 0x00, 0xcd, 0xce, 0xcc, 0x30, 0xc0, 0xf3, 0xc0,
    0x00, 0xc0, 0xc0, 0x00, 0xe0, 0xfc, 0xe0, 0x30, 0xc0, 0xff, 0xc0, 0x00, 0xc0, 0x60, 0x00, 0x78,
    0x78, 0x78, 0x30, 0xfc, 0xde, 0xc0, 0x01, 0x80, 0x60, 0x00, 0x3c, 0x30, 0x3c, 0x30, 0xfc, 0xcc,
    0xc0, 0x01, 0x80, 0x60, 0x00, 0x0c, 0x30, 0x0c, 0x30, 0xc0, 0xc0, 0xc0, 0x01, 0x80, 0x30, 0x00,
    0xcc, 0x30, 0xcc, 0x30, 0xc0, 0xc0, 0xc0, 0x03, 0x00, 0x38, 0x00, 0xfc, 0x30, 0xfc, 0x30, 0xfe,
    0xc0, 0xc0, 0x07, 0x00, 0x18, 0x00, 0x78, 0x30, 0x78, 0x30, 0x7e, 0xc0, 0xc0, 0x06, 0x00, 0x0e,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00,
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfe, 0x00, 0x00};

  Pen hsv_lut[120];

  void draw_logo(int16_t split) {
    Pen *d = &screen.data[19 + 35 * 120];
    uint8_t *s = logo;
    Pen white(15, 15, 15);
    for(int y = 35; y < 85; y++) {
      for(int x = 19; x < 101; x+=8) {
        for(int bit = 0; bit < 8; bit++) {
          if(*s & (0b10000000 >> bit)) {
            if(x + bit < split) {
              int ci = x + bit;
              ci = ci < 0 ? 0 : ci;
              ci = ci > 119 ? 119 : ci;
              *d = hsv_lut[ci];
            }else{
              *d = white;
            }
          }
          d++;
        }
        s++;
      }
      d+=32;
    }
  }

  void intro() {

    set_backlight(0);

    Pen black(0, 0, 0);
    Pen white(15, 15, 15);

    for(int i = 0; i < 120; i++) {
      float hue = float(i) / 120.0f;
      hsv_lut[i] = Pen::from_hsv(hue, 1.0f, 1.0f);
    }

    struct particle {
      float x, y, dx, dy, hue, age;
    };

    screen.pen = black;
    screen.clear();
    draw_logo(0);
    flip();

    for(int16_t f = 0; f < 100; f++) {
      set_backlight(f);
      sleep_ms(5);
    }

    screen.pen = black;
    screen.clear();

    std::vector<particle> sparks;

    for(int16_t x = -50; x < 200; x+=2) {
      screen.pen = black;
      screen.clear();

      // draw logo to screen
      draw_logo(x);

      // add new particles
      uint8_t e = 5;
      for(int k = 0; k < e; k++) {
        particle p;
        p.x = x;
        p.y = 60;
        p.hue = x / 120.0f;
        p.hue = p.hue < 0.0f ? 0.0f : p.hue;
        p.hue = p.hue > 1.0f ? 1.0f : p.hue;
        p.age = 0.0f;
        p.dx = (float(rand() % 100) / 25.0f) - 2.0f;
        p.dy = (float(rand() % 100) / 25.0f) - 2.0f;
        sparks.insert(sparks.begin(), p);
      }

      // remove old particles
      sparks.erase(
        std::remove_if(
          sparks.begin(),
          sparks.end(),
          [](particle const & p) { return p.age >= 1.0f; }
        ),
        sparks.end()
      );

      // update and draw particles
      for(auto &p : sparks) {
        p.x += p.dx;
        p.y += p.dy;
        p.age += 0.01;

        screen.pen = Pen::from_hsv(p.hue, 1.0f, 1.0f);
        screen.pixel(p.x, p.y);
      }

      flip();
    }

    screen.pen = black;
    screen.clear();
    draw_logo(120);
    flip();

    sleep_ms(1000);
  }


}